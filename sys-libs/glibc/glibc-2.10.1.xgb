#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="GNU libc6 (also called glibc2) C library"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://www.gnu.org/software/libc/libc.html"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

#SRC_URI="http://foo.bar.com/$N-$V.tar.bz2"
SRC_URI="http://ftp.gnu.org/gnu/glibc/$N-$V$R.tar.bz2"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"



#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking ..."
	tar xf $XGPATH_SOURCE/$N-$V$R.tar.bz2
}

#config
xgb_config()
{
	#cd build directory.
	cd $N-$V$R

	#fix a potential issue : bash infinite loop. 
	sed -i '/vi_VN.TCVN/d' localedata/SUPPORTED

	#fix sh problem if other shell installed.
	sed -i 's|@BASH@|/bin/bash|' elf/ldd.bash.in

	mkdir ../build
	cd ../build
	err_check "[Error] glibc: create build directory failed."

	echo "CFLAGS += -march=i686 -mtune=native" > configparms

	XGB_CONFIG="--prefix=/usr \
		--disable-profile --enable-add-ons \
		--enable-kernel=2.6.0 --libexecdir=/usr/lib/glibc"

	../$N-$V$R/configure $XGB_CONFIG

	err_check "[Error] configure failed."
}

#build
xgb_build()
{
	#run make in current directory
	echo "Begin making glibc.."
	make 
}


glibc_nsswitch_conf()
{
cat > $XGPATH_DEST/etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF
}

glibc_ld_so_conf()
{
cat > $XGPATH_DEST/etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf

/usr/local/lib
/opt/lib

# End /etc/ld.so.conf
EOF
}



#install
xgb_install()
{
	#install everything to $XGPATH_DEST
	make install_root=$XGPATH_DEST install
	err_check "[Error] install glibc failed."

	#add nsswitch.conf / glibc.ld.so
	glibc_nsswitch_conf
	glibc_ld_so_conf

	#config timezone.
	cp -v --remove-destination $XGPATH_DEST/usr/share/zoneinfo/Asia/Shanghai \
		$XGPATH_DEST/etc/localtime
	err_check "glibc: config time zone failed."
}

glib_adjust_toolchain()
{
	echo "Begin adjust tool chain..."

	#adjust tool chain.
	mv -v /tools/bin/{ld,ld-old}
	mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
	mv -v /tools/bin/{ld-new,ld}
	ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld

	#adjust gcc.
	gcc -dumpspecs | sed \
		-e 's@/tools/lib/ld-linux.so.2@/lib/ld-linux.so.2@g' \
		-e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
		-e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' > \
		`dirname $(gcc --print-libgcc-file-name)`/specs

	#check.
	echo 'main(){}' > dummy.c
	cc dummy.c -v -Wl,--verbose &> dummy.log
	err_check "[Error] compile dummy.c failed."
	readelf -l a.out | grep ': /lib'
	err_check "[Error] gcc: not link to /lib."
	grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
	err_check "[Error] glib: start .o file check failed."
	grep -B1 '^ /usr/include' dummy.log
	err_check "[Error] glib: include dir check failed."

}

#post install
xgb_postinst()
{
	#install locale
	echo "Install locales.."
	mkdir -pv /usr/lib/locale
	localedef -i en_US -f ISO-8859-1 en_US
	localedef -i en_US -f UTF-8 en_US.UTF-8
	localedef -i zh_CN -f GB2312 zh_CN.GB2312
	localedef -i zh_CN -f UTF-8 zh_CN.UTF-8
	
	glib_adjust_toolchain

}

#pre remove
xgb_prerm()
{
	#remove locale
	rm -rf /usr/lib/locale
	return 0
}

#post remove
xgb_postrm()
{
	return 0
}
