#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="a collection of modular and reusable compiler and toolchain technologies."

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://llvm.org/"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SRC_URI="https://github.com/llvm/llvm-project/releases/download/llvmorg-$V/llvm-$V.src.tar.xz \
	https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-$V.src.tar.xz \
	https://www.linuxfromscratch.org/patches/blfs/svn/clang-15.0.3-enable_default_ssp-1.patch \
	https://github.com/llvm/llvm-project/releases/download/llvmorg-$V/clang-$V.src.tar.xz \
	https://github.com/llvm/llvm-project/releases/download/llvmorg-$V/compiler-rt-$V.src.tar.xz"



# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="cmake ${RDEPEND}"



#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/$N-$V.src.tar.xz
	err_check "uncompress llvm failed."

}

#config
xgb_config()
{
	echo "config $N-$V$R..."

	#fist, cd build directory
	cd $N-$V$R.src
	err_check "enter directory failed."

	tar xf $XGPATH_SOURCE/llvm-cmake-$V.src.tar.xz 
	err_check "uncompress cmake module failed."


	tar xf $XGPATH_SOURCE/clang-$V.src.tar.xz -C tools
	err_check "uncompress clang failed."

	tar xf $XGPATH_SOURCE/compiler-rt-$V.src.tar.xz -C projects
	err_check "uncompress compiler-rt failed."

	mv cmake-$V.src ../cmake &&
	mv tools/clang-$V.src tools/clang &&
	mv projects/compiler-rt-$V.src projects/compiler-rt
	err_check "rename failed."

	grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'
	err_check "rename to python3 failed"

	patch -Np2 -d tools/clang <$XGPATH_SOURCE/clang-15.0.3-enable_default_ssp-1.patch
	err_check "patch failed"

	mkdir build
	cd build


	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG=" -DCMAKE_INSTALL_PREFIX=/usr \
			-DLLVM_ENABLE_FFI=ON \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DLLVM_LINK_LLVM_DYLIB=ON \
			-DLLVM_ENABLE_RTTI=ON \
			 -DLLVM_BINUTILS_INCDIR=/usr/include       \
			 -DLLVM_INCLUDE_BENCHMARKS=OFF             \
			 -DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
			-DLLVM_BUILD_STATIC=OFF \
			-Wno-dev -G Ninja "

	#Third, call configure with $XGB_CONFIG
	cmake $XGB_CONFIG ..
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	ninja $XGPARA_MAKE
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
	#make check
}

#install
xgb_install()
{
	echo "install to $XGPATH_DEST"

	#install everything to $XGPATH_DEST
	DESTDIR=$XGPATH_DEST ninja install
}

