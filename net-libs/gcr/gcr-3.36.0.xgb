#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="displaying certificates and accessing key stores"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://foo.bar.com/"
# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SRC_URI="http://ftp.gnome.org/pub/gnome/sources/gcr/3.36/gcr-$V.tar.xz"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND="glib2 libgcrypt p11-kit"

# Build time depend
DEPEND="${RDEPEND}"



#init 
xgb_init()
{
	echo "init $N-$V$R build script..."
}

#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/$N-$V$R.tar.xz
}

#config
xgb_config()
{
	echo "config $N-$V$R..."

	#fist, cd build directory
	cd $N-$V$R
	err_check "enter directory failed."

	sed -i -r 's:"(/desktop):"/org/gnome\1:' schema/*.xml
	err_check "patch directory failed."

	mkdir gcr-build
	cd gcr-build
	err_check "cd build failed."

	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG+=" --sysconfdir=/etc -Dgtk_doc=false -Dintrospection=false " 

	#Third, call configure with $XGB_CONFIG
	meson $XGB_CONFIG ..
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	ninja
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
	#make check
}

#install
xgb_install()
{
	echo "install to $XGPATH_DEST"

	#install everything to $XGPATH_DEST
	DESTDIR=$XGPATH_DEST ninja install
	err_check "install failed."


 	#start up files
    local imgconv1=""
    local imgconv2="/usr/share/icons/hicolor/32x32/apps/gcr-key-pair.png"
    local menu_type=sys
    local menu_name=gcr-viewer
    local menu_cmd=gcr-viewer
    local menu_index=C66Gcrviewer

    local convpara=""
    local menufile="$XGPATH_DEST/etc/xg_launch/$menu_type/$menu_index"

    declare -A Name
    Name[en]="gcr-viewer"
    Name[zh_CN]="证书查看器"

    xgb_mkmenu

}

#post install
xgb_postinst()
{
	echo "compile schemas.."
	glib-compile-schemas /usr/share/glib-2.0/schemas
}

#pre remove
xgb_prerm()
{
	echo "running before package delete..."
}

#post remove
xgb_postrm()
{
	echo "postrm.."
}
