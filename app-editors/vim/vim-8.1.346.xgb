#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="Vim, an improved vi-style text editor"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://www.vim.org/"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SRC_URI="ftp://ftp.vim.org/pub/vim/unix/vim-8.1.tar.bz2"

VIM_PATCH_MIN=1
VIM_PATCH_MAX=346
VIM_PATCH_URL="ftp://ftp.vim.org/pub/vim/patches/8.1"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"



#init 
xgb_init()
{
	local name
	local i

	echo "Init..."

	for ((i=$VIM_PATCH_MIN; i<=$VIM_PATCH_MAX; i++))
	do
		name=`printf "8.1.%04d" $i`
		SRC_URI+=" $VIM_PATCH_URL/$name "
	done

	XGPATH_SOURCE=$XGPATH_SOURCE_RAW/$N
}

#unpack
xgb_unpack()
{
	local name
	local i

	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/vim-8.1.tar.bz2
	err_check "unpack $N failed."

	#fist, cd build directory
	cd vim81
	err_check "enter build directory failed."

	#patch 0-100
	echo "patching ..."
	for ((i=$VIM_PATCH_MIN; i<=$VIM_PATCH_MAX; i++))
	do
		name=`printf "8.1.%04d" $i`
		patch -N -fp0 -i $XGPATH_SOURCE/$name
		#err_check "patch $name failed."
	done

	echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
	err_check "patch $N failed."

	#patch version.c
	sed -i "s/VIM_VERSION_LONG_ONLY/VIM_VERSION_LONG/g" src/version.c

	sed -i "s/VIM_VERSION_DATE_ONLY/VIM_VERSION_LONG_DATE/g" src/version.c

}

#config
xgb_config()
{
	echo "config $N-$V$R..."


	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG+=" --enable-multibyte  --without-x --enable-gui=no"

	#Third, call configure with $XGB_CONFIG
	./configure $XGB_CONFIG
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	make $XGPARA_MAKE
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."

	#uncomment this may crash screen diaplay
	#make test
}

#vimrc
xgb_vimrc()
{
	mkdir -p $XGPATH_DEST/etc
	cat > $XGPATH_DEST/etc/vimrc << "EOF"
" Begin /etc/vimrc
set nocompatible
set backspace=2
set ruler
set tags=tags
set ai
set ic

"clipboard
set clipboard+=unnamed

"show status bar always
set laststatus=2
set statusline=%F%m%r%h%w\ [%{&ff}]\ [%Y]\ [%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}


"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
"autocmd FileType php set omnifunc=phpcomplete#CompletePHP
"autocmd FileType c set omnifunc=ccomplete#Complete

"file type
filetype on
filetype plugin on
filetype indent on
set completeopt=longest,menu

"remove auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"mouse
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key

set t_Co=8
set ts=4
set shiftwidth=4
set backupdir=~/.vim
set directory=/tmp

au VimLeave * exe 'if strlen(v:this_session) | exe "mksession! " . v:this_session | endif '

set background=dark
highlight! link DiffText MatchParen
syntax on

if (&term == "xterm") || (&term == "iterm") || (&term == "putty")
set t_Co=256
endif
" End /etc/vimrc
EOF

}

#install
xgb_install()
{

	echo "install to $XGPATH_DEST"

	#install everything to $XGPATH_DEST
	make DESTDIR=$XGPATH_DEST install
	err_check "install $N failed."

	#create vi
	ln -sv vim $XGPATH_DEST/usr/bin/vi
	err_check "install $N failed."

	mkdir $XGPATH_DEST/usr/share/doc
	ln -sv ../vim/vim81/doc $XGPATH_DEST/usr/share/doc/vim-8.1
	err_check "install $N failed."

	mkdir -p $XGPATH_DEST/root/.vim
	err_check "install $N 3 failed."

	mkdir -p $XGPATH_DEST/etc/skel/.vim
	err_check "install $N 4 failed."

	#write vimrc
	xgb_vimrc
}


