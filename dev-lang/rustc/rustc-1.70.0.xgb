#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="a safe, concurrent, practical language"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="https://www.rust-lang.org"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

#SRC_URI="http://foo.bar.com/$N-$V.tar.bz2"
SRC_URI="https://static.rust-lang.org/dist/rustc-$V-src.tar.gz"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND="libssh2 llvm"

# Build time depend
DEPEND="${RDEPEND}"



#init 
xgb_init()
{
	echo "init $N-$V$R build script..."
}

#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/$N-$V-src.tar.gz
}

#config
xgb_config()
{
	echo "config $N-$V$R..."

	#fist, cd build directory
	cd rustc-$V-src
	err_check "enter directory failed."

	cat << EOF > config.toml
# see config.toml.example for more possible options
[llvm]
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# install cargo as well as rust
docs = false
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/usr"
docdir = "share/doc/$V"

[rust]
channel = "stable"
description = "for Xiange Linux 2023.6"
rpath = false

# BLFS does not install the FileCheck executable from llvm,
# so disable codegen tests
codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# delete this *section* if you are not using system llvm.
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

EOF


	#second, add package specified config params to XGB_CONFIG
	#XGB_CONFIG+=" --foo --bar "

	#Third, call configure with $XGB_CONFIG
	#./configure $XGB_CONFIG
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	#make $XGPARA_MAKE
	export CARGO_HOME=/tmp/cargo

	mkdir -p $CARGO_HOME
	err_check "make cargo failed"
	chmod o+rwx $CARGO_HOME
	err_check "chomod cargo failed"

	export LIBSSH2_SYS_USE_PKG_CONFIG=1
	export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi" &&
		python3 ./x.py build 
		#python3 ./x.py build --exclude src/tools/miri

}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
	#make check
}

#install
xgb_install()
{
	echo "install to $XGPATH_DEST"

	#install everything to $XGPATH_DEST
	#make DESTDIR=$XGPATH_DEST install

	export CARGO_HOME=/tmp/cargo
	export LIBSSH2_SYS_USE_PKG_CONFIG=1 &&
		DESTDIR=$XGPATH_DEST python3 ./x.py install &&
		unset LIBSSH2_SYS_USE_PKG_CONFIG
	err_check "install failed"

	#setup CARGO_HOME
	mkdir -p $XGPATH_DEST/opt
	err_check "crate opt  failed"
 	mv /tmp/cargo $XGPATH_DEST/opt
	err_check "install cargo home failed"
	chmod "o+rwx"  $XGPATH_DEST/opt/cargo
	err_check "chmod cargo home failed"

	mkdir -p $XGPATH_DEST/etc/profile.d
	err_check "create profiles.d failed"
	echo "export CARGO_HOME=/opt/cargo" > $XGPATH_DEST/etc/profile.d/cargo_home

}

#post install
xgb_postinst()
{
	echo "running after package installed..."
}

#pre remove
xgb_prerm()
{
	echo "running before package delete..."
}

#post remove
xgb_postrm()
{
	echo "running after package delete..."
}
