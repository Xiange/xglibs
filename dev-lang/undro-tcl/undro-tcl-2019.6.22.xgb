#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="Tool Command Language inside AndroWish/UndroWish"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://www.androwish.org"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

#SRC_URI="http://foo.bar.com/$N-$V.tar.bz2"
SRC_URI="http://www.androwish.org/download/androwish-6e2085e6e4.tar.gz"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="rsync ${RDEPEND}"



#init 
xgb_init()
{
	XGPATH_SOURCE=$XGPATH_SOURCE_RAW/androwish-$V
}

#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/$(basename $SRC_URI)
}

#config
xgb_config()
{
	echo "config $N-$V$R..."

	#fist, cd build directory
	cd androwish-6e2085e6e4/undroid
	err_check "enter directory failed."

	./build-undroidwish-wayland.sh init
	err_check "script init failed"


	cd tcl
	err_check "enter tcl failed"

	#patch for sdl2tk: TclCreateLatedExitHandler
	cd generic
	patch -p1 < $XGPATH_SCRIPT/sdl2tk.diff
	err_check "patch failed"
	cd ..
	
	export SRCDIR=`pwd`

	cd unix
    err_check "enter unix failed."


	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG+=" --without-tzdata --with-zipfs "

	if [ "$XGB_ARCH" == "x86_64" ]; then
		XGB_CONFIG+=" --enable-64bit " 
	fi


	#Third, call configure with $XGB_CONFIG
	./configure $XGB_CONFIG
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	make $XGPARA_MAKE
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
	#make check
}

#install
xgb_install()
{
	echo "install to $XGPATH_DEST"

	sed -e "s#$SRCDIR/unix#/usr/lib#" \
		-e "s#$SRCDIR#/usr/include#"  \
		-i tclConfig.sh               
	err_check "install 1 failed."

	sed -e "s#$SRCDIR/unix/pkgs/tdbc1.1.0#/usr/lib/tdbc1.1.0#" \
		-e "s#$SRCDIR/pkgs/tdbc1.1.0/generic#/usr/include#"    \
		-e "s#$SRCDIR/pkgs/tdbc1.1.0/library#/usr/lib/tcl8.6#" \
		-e "s#$SRCDIR/pkgs/tdbc1.1.0#/usr/include#"            \
		-i pkgs/tdbc1.1.0/tdbcConfig.sh     
	err_check "install 2 failed."

	sed -e "s#$SRCDIR/unix/pkgs/itcl4.1.2#/usr/lib/itcl4.1.2#" \
		-e "s#$SRCDIR/pkgs/itcl4.1.2/generic#/usr/include#"    \
		-e "s#$SRCDIR/pkgs/itcl4.1.2#/usr/include#"            \
		-i pkgs/itcl4.1.2/itclConfig.sh    
	err_check "install 3 failed."

	unset SRCDIR

	#install everything to $XGPATH_DEST
	make DESTDIR=$XGPATH_DEST install &&
	make DESTDIR=$XGPATH_DEST install-private-headers
	err_check "install $V-$N failed."

	#zipfs
	install -m 0644 ../generic/zipfs.h $XGPATH_DEST/usr/include
	err_check "install zipfs failed"

	#create symbol link
	ln -v -sf tclsh8.6 $XGPATH_DEST/usr/bin/tclsh &&
	chmod -v 755 $XGPATH_DEST/usr/lib/libtcl8.6.so
	err_check "install $V-$N 4 failed."

}

#post install
xgb_postinst()
{
	echo "running after package installed..."
}

#pre remove
xgb_prerm()
{
	echo "running before package delete..."
}

#post remove
xgb_postrm()
{
	echo "running after package delete..."
}
